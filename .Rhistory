library(psych)        # Scatterplot Matrix
library(e1071)        # SVM
library(rpart)        # RANDON FOREST
library(readr)        # GERAR CSV
library(tidyverse)    # Drop_NA()
library(readxl)       # Importar xls
library("data.table") # Comando FREAD
# ****************************************************
# ***                   DADOS                      ***
# ***                                              ***
# ****************************************************
# Etapa 1 - Coletando os dados
nota <- read_csv("train.csv")
notateste <- read_csv("test.csv")
PIB_2016 <- read_excel("PIB-2016.xls")
# ****************************************************
# ***                   INCLUIR                    ***
# ***                NOVAS VARIÁVEIS               ***
# ****************************************************
#média do pib por estado
PIB_2016 = PIB_2016 %>% filter(Ano == 2016)
PIB_2016 = PIB_2016[c(names(PIB_2016)[5], names(PIB_2016)[42])]
MEDIA_PIB_2016 = aggregate(PIB_2016$`Produto Interno Bruto per capita
(R$ 1,00)`,
by=list(PIB_2016$`Sigla da Unidade da Federação`),
FUN = mean)
colnames(MEDIA_PIB_2016) = c("SG_UF_RESIDENCIA","media")
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
#Transformar os dois datasets com as mesmas variáveis
notateste = merge(notateste,MEDIA_PIB_2016)
nomes <- names(notateste)
# Criar regioes com os estados por prova
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
#Transformar os dois datasets com as mesmas variáveis
nota = merge(nota,MEDIA_PIB_2016)
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
testando$Q027 = as.numeric(testando$Q027)
glimpse(testando)
notateste <- fread("test.csv")
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
glimpse(testando)
notateste <- read_csv("test.csv")
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
glimpse(testando)
# Configurando o diretório de trabalho
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
library(dplyr)        # Filtragens
library(psych)        # Scatterplot Matrix
library(e1071)        # SVM
library(rpart)        # RANDON FOREST
library(readr)        # GERAR CSV
library(tidyverse)    # Drop_NA()
library(readxl)       # Importar xls
library("data.table") # Comando FREAD
# ****************************************************
# ***                   DADOS                      ***
# ***                                              ***
# ****************************************************
# Etapa 1 - Coletando os dados
nota <- read_csv("train.csv")
notateste <- read_csv("test.csv")
PIB_2016 <- read_excel("PIB-2016.xls")
# ****************************************************
# ***                   INCLUIR                    ***
# ***                NOVAS VARIÁVEIS               ***
# ****************************************************
#média do pib por estado
PIB_2016 = PIB_2016 %>% filter(Ano == 2016)
PIB_2016 = PIB_2016[c(names(PIB_2016)[5], names(PIB_2016)[42])]
MEDIA_PIB_2016 = aggregate(PIB_2016$`Produto Interno Bruto per capita
(R$ 1,00)`,
by=list(PIB_2016$`Sigla da Unidade da Federação`),
FUN = mean)
colnames(MEDIA_PIB_2016) = c("SG_UF_RESIDENCIA","media")
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
#Transformar os dois datasets com as mesmas variáveis
notateste = merge(notateste,MEDIA_PIB_2016)
nomes <- names(notateste)
# Criar regioes com os estados por prova
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
#Transformar os dois datasets com as mesmas variáveis
nota = merge(nota,MEDIA_PIB_2016)
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
glimpse(testando)
View(testando)
testando$Q027 = as.numeric(testando$Q027)
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
library(dplyr)        # Filtragens
library(psych)        # Scatterplot Matrix
library(e1071)        # SVM
library(rpart)        # RANDON FOREST
library(readr)        # GERAR CSV
library(tidyverse)    # Drop_NA()
library(readxl)       # Importar xls
library("data.table") # Comando FREAD
# ****************************************************
# ***                   DADOS                      ***
# ***                                              ***
# ****************************************************
# Etapa 1 - Coletando os dados
nota <- fread("train.csv")
notateste <- fread("test.csv")
PIB_2016 <- read_excel("PIB-2016.xls")
# ****************************************************
# ***                   INCLUIR                    ***
# ***                NOVAS VARIÁVEIS               ***
# ****************************************************
#média do pib por estado
PIB_2016 = PIB_2016 %>% filter(Ano == 2016)
PIB_2016 = PIB_2016[c(names(PIB_2016)[5], names(PIB_2016)[42])]
MEDIA_PIB_2016 = aggregate(PIB_2016$`Produto Interno Bruto per capita
(R$ 1,00)`,
by=list(PIB_2016$`Sigla da Unidade da Federação`),
FUN = mean)
colnames(MEDIA_PIB_2016) = c("SG_UF_RESIDENCIA","media")
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
#Transformar os dois datasets com as mesmas variáveis
notateste = merge(notateste,MEDIA_PIB_2016)
nomes <- names(notateste)
# Criar regioes com os estados por prova
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
#Transformar os dois datasets com as mesmas variáveis
nota = merge(nota,MEDIA_PIB_2016)
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
testando$Q027 = as.factor(testando$Q027)
testando$Q027 = as.numeric(testando$Q027)
testando$Q027[(testando$Q027 == 1)] <- mean(testando$Q027)
glimpse(testando)
testando$TP_DEPENDENCIA_ADM_ESC = NULL
testando$TP_ENSINO = NULL
## LIMPEZA Retirando valores NA da tabela
testando = testando %>% drop_na()
any(is.na(testando))
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
# Transformar variaveis em factor
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$Q001 = as.factor(testando$Q001)
testando$Q002 = as.factor(testando$Q002)
testando$Q006 = as.factor(testando$Q006)
testando$Q024 = as.factor(testando$Q024)
testando$Q025 = as.factor(testando$Q025)
testando$Q026 = as.factor(testando$Q026)
testando$Q047 = as.factor(testando$Q047)
testando$CO_PROVA_CN = as.factor(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.factor(testando$CO_PROVA_CH)
# Configurando o diretório de trabalho
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
library(dplyr)        # Filtragens
library(psych)        # Scatterplot Matrix
library(e1071)        # SVM
library(rpart)        # RANDON FOREST
library(readr)        # GERAR CSV
library(tidyverse)    # Drop_NA()
library(readxl)       # Importar xls
library("data.table") # Comando FREAD
# ****************************************************
# ***                   DADOS                      ***
# ***                                              ***
# ****************************************************
# Etapa 1 - Coletando os dados
nota <- fread("train.csv")
notateste <- fread("test.csv")
PIB_2016 <- read_excel("PIB-2016.xls")
# ****************************************************
# ***                   INCLUIR                    ***
# ***                NOVAS VARIÁVEIS               ***
# ****************************************************
#média do pib por estado
PIB_2016 = PIB_2016 %>% filter(Ano == 2016)
PIB_2016 = PIB_2016[c(names(PIB_2016)[5], names(PIB_2016)[42])]
MEDIA_PIB_2016 = aggregate(PIB_2016$`Produto Interno Bruto per capita
(R$ 1,00)`,
by=list(PIB_2016$`Sigla da Unidade da Federação`),
FUN = mean)
colnames(MEDIA_PIB_2016) = c("SG_UF_RESIDENCIA","media")
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
#Transformar os dois datasets com as mesmas variáveis
notateste = merge(notateste,MEDIA_PIB_2016)
nomes <- names(notateste)
# Criar regioes com os estados por prova
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
#Transformar os dois datasets com as mesmas variáveis
nota = merge(nota,MEDIA_PIB_2016)
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
testando$Q027 = as.factor(testando$Q027)
testando$Q027 = as.numeric(testando$Q027)
testando$Q027[(testando$Q027 == 1)] <- mean(testando$Q027)
glimpse(testando)
testando$TP_DEPENDENCIA_ADM_ESC = NULL
testando$TP_ENSINO = NULL
## LIMPEZA Retirando valores NA da tabela
testando = testando %>% drop_na()
any(is.na(testando))
# Transformar variaveis em factor
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$Q001 = as.factor(testando$Q001)
testando$Q002 = as.factor(testando$Q002)
testando$Q006 = as.factor(testando$Q006)
testando$Q024 = as.factor(testando$Q024)
testando$Q025 = as.factor(testando$Q025)
testando$Q026 = as.factor(testando$Q026)
testando$Q047 = as.factor(testando$Q047)
testando$CO_PROVA_CN = as.factor(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.factor(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.factor(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.factor(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.factor(testando$regioes)
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$Q001 = as.numeric(testando$Q001)
testando$Q002 = as.numeric(testando$Q002)
testando$Q006 = as.numeric(testando$Q006)
testando$Q024 = as.numeric(testando$Q024)
testando$Q025 = as.numeric(testando$Q025)
testando$Q026 = as.numeric(testando$Q026)
testando$Q047 = as.numeric(testando$Q047)
testando$CO_PROVA_CN = as.numeric(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.numeric(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.numeric(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.numeric(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-2)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-2)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando[c(-2)]
testando[c(2)]
names(testando[c(2)])
names(testando[(2)])
names(testando[2])
testando = notateste
testando$Q027 = as.factor(testando$Q027)
testando$Q027 = as.numeric(testando$Q027)
testando$Q027[(testando$Q027 == 1)] <- mean(testando$Q027)
glimpse(testando)
testando$TP_DEPENDENCIA_ADM_ESC = NULL
testando$TP_ENSINO = NULL
## LIMPEZA Retirando valores NA da tabela
testando = testando %>% drop_na()
any(is.na(testando))
# Transformar variaveis em factor
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$Q001 = as.factor(testando$Q001)
testando$Q002 = as.factor(testando$Q002)
testando$Q006 = as.factor(testando$Q006)
testando$Q024 = as.factor(testando$Q024)
testando$Q025 = as.factor(testando$Q025)
testando$Q026 = as.factor(testando$Q026)
testando$Q047 = as.factor(testando$Q047)
testando$CO_PROVA_CN = as.factor(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.factor(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.factor(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.factor(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.factor(testando$regioes)
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$Q001 = as.numeric(testando$Q001)
testando$Q002 = as.numeric(testando$Q002)
testando$Q006 = as.numeric(testando$Q006)
testando$Q024 = as.numeric(testando$Q024)
testando$Q025 = as.numeric(testando$Q025)
testando$Q026 = as.numeric(testando$Q026)
testando$Q047 = as.numeric(testando$Q047)
testando$CO_PROVA_CN = as.numeric(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.numeric(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.numeric(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.numeric(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
notateste = testando
testando = names(testando[2])
nomes <- names(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Machine Learning - Regressão
# Prevendo Notas de Matemática dos Participantes do ENEM
# Configurando o diretório de trabalho
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
library(dplyr)        # Filtragens
library(psych)        # Scatterplot Matrix
library(e1071)        # SVM
library(rpart)        # RANDON FOREST
library(readr)        # GERAR CSV
library(tidyverse)    # Drop_NA()
library(readxl)       # Importar xls
library("data.table") # Comando FREAD
# ****************************************************
# ***                   DADOS                      ***
# ***                                              ***
# ****************************************************
# Etapa 1 - Coletando os dados
nota <- fread("train.csv")
notateste <- fread("test.csv")
PIB_2016 <- read_excel("PIB-2016.xls")
# ****************************************************
# ***                   INCLUIR                    ***
# ***                NOVAS VARIÁVEIS               ***
# ****************************************************
#média do pib por estado
PIB_2016 = PIB_2016 %>% filter(Ano == 2016)
PIB_2016 = PIB_2016[c(names(PIB_2016)[5], names(PIB_2016)[42])]
MEDIA_PIB_2016 = aggregate(PIB_2016$`Produto Interno Bruto per capita
(R$ 1,00)`,
by=list(PIB_2016$`Sigla da Unidade da Federação`),
FUN = mean)
colnames(MEDIA_PIB_2016) = c("SG_UF_RESIDENCIA","media")
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
#Transformar os dois datasets com as mesmas variáveis
notateste = merge(notateste,MEDIA_PIB_2016)
nomes <- names(notateste)
# Criar regioes com os estados por prova
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
#Transformar os dois datasets com as mesmas variáveis
nota = merge(nota,MEDIA_PIB_2016)
# ****************************************************
# ***                   TESTE                      ***
# ***                                              ***
# ****************************************************
testando = notateste
testando$Q027 = as.factor(testando$Q027)
testando$Q027 = as.numeric(testando$Q027)
testando$Q027[(testando$Q027 == 1)] <- mean(testando$Q027)
glimpse(testando)
testando$TP_DEPENDENCIA_ADM_ESC = NULL
testando$TP_ENSINO = NULL
## LIMPEZA Retirando valores NA da tabela
testando = testando %>% drop_na()
any(is.na(testando))
# Transformar variaveis em factor
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$Q001 = as.factor(testando$Q001)
testando$Q002 = as.factor(testando$Q002)
testando$Q006 = as.factor(testando$Q006)
testando$Q024 = as.factor(testando$Q024)
testando$Q025 = as.factor(testando$Q025)
testando$Q026 = as.factor(testando$Q026)
testando$Q047 = as.factor(testando$Q047)
testando$CO_PROVA_CN = as.factor(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.factor(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.factor(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.factor(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.factor(testando$regioes)
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$Q001 = as.numeric(testando$Q001)
testando$Q002 = as.numeric(testando$Q002)
testando$Q006 = as.numeric(testando$Q006)
testando$Q024 = as.numeric(testando$Q024)
testando$Q025 = as.numeric(testando$Q025)
testando$Q026 = as.numeric(testando$Q026)
testando$Q047 = as.numeric(testando$Q047)
testando$CO_PROVA_CN = as.numeric(testando$CO_PROVA_CN)
testando$CO_PROVA_CH = as.numeric(testando$CO_PROVA_CH)
testando$CO_PROVA_LC = as.numeric(testando$CO_PROVA_LC)
testando$CO_PROVA_MT = as.numeric(testando$CO_PROVA_MT)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
notateste = testando
testando = testando[c(-2)]
nomes <- names(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(notateste)
testando$NU_INSCRICAO = NULL
nomes <- names(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(notateste)
