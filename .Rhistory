treinando$regioes = as.numeric(treinando$regioes)
nota = treinando
treinando = treinando[c(-1)]
glimpse(treinando)
# Scatterplot Matrix
#install.packages("psych")
library(psych)
# Etapa 3: Treinando o Modelo (usando os dados de treino)
modelo <- lm(NU_NOTA_MT ~ ., data = treinando)
# Visualizando os coeficientes
modelo
# Aqui verificamos as notas previstas pelo modelo que devem ser iguais aos dados de treino
previsao1 <- predict(modelo)
View(previsao1)
# Etapa 4: Avaliando a Performance do Modelo
# Mais detalhes sobre o modelo
summary(modelo)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
# Adicionando uma variável com o dobro do valor das idades
treinando$idade2 <- treinando$NU_IDADE ^ 2
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Configurando o diretório de trabalho
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
#### TESTE #####
#Transformar os dois datasets com as mesmas variáveis
notateste <- read.csv("test.csv", stringsAsFactors = FALSE)
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
testando = testando[c(-25:-28)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
#### TESTE #####
#Transformar os dois datasets com as mesmas variáveis
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-1)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Configurando o diretório de trabalho
setwd("C:/Users/Matilde/Dropbox/DESAFIO-Codenation(ENEM)/desafio_nota_do_enem")
getwd()
#### TESTE #####
#Transformar os dois datasets com as mesmas variáveis
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
testando = testando[c(-1)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.factor(testando$SG_UF_RESIDENCIA)
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.factor(testando$TP_SEXO)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-48)]
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-49)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando = testando[c(-47)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
names(glimpse(testando))
testando = testando[c(-44)]
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
#### TESTE #####
#Transformar os dois datasets com as mesmas variáveis
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
testando = testando[c(-1)]
testando = testando[c(-44)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando$regioes = as.factor(testando$regioes)
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
testando = testando[c(-1)]
testando = testando[c(-44)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando[40]
names(testando[40])
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
names(testando[40])
names(testando[42])
names(testando[37])
names(testando[35])
testando$regioes = as.numeric(testando[35:42])
names(testando[35:42])
testando$regioes = as.numeric(testando[35:40])
testando$regioes = as.numeric(testando[35:39])
testando$regioes = as.double(testando[35:39])
testando$regioes = as.numeric(testando[35])
testando$regioes = as.numeric(testando$Q001)
names(testando[35:42])
testando$regioes = as.numeric(testando$regioes)
testando$regioes = as.numeric(testando$Q001)
testando$regioes = as.numeric(testando$Q002)
testando$regioes = as.numeric(testando$Q006)
testando$regioes = as.numeric(testando$Q024)
testando$regioes = as.numeric(testando$Q025)
testando$regioes = as.numeric(testando$Q026)
testando$regioes = as.numeric(testando$Q027)
testando$regioes = as.numeric(testando$Q047)
names(testando[35:42])
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
testando = testando[c(-1)]
testando = testando[c(-44)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
testando$regioes = as.numeric(testando$Q001)
testando$regioes = as.numeric(testando$Q002)
testando$regioes = as.numeric(testando$Q006)
testando$regioes = as.numeric(testando$Q024)
testando$regioes = as.numeric(testando$Q025)
testando$regioes = as.numeric(testando$Q026)
testando$regioes = as.numeric(testando$Q027)
testando$regioes = as.numeric(testando$Q047)
names(testando[35:42])
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
testando$regioes = as.double(testando$Q001)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
as.numeric(testando$Q002)
testando$Q001 = as.double(testando$Q001)
testando$Q002 = as.numeric(testando$Q002)
testando$Q006 = as.numeric(testando$Q006)
testando$Q024 = as.numeric(testando$Q024)
testando$Q025 = as.numeric(testando$Q025)
testando$Q026 = as.numeric(testando$Q026)
testando$Q027 = as.numeric(testando$Q027)
testando$Q047 = as.numeric(testando$Q047)
#### TESTE #####
#Transformar os dois datasets com as mesmas variáveis
notateste <- read.csv("test.csv")
library(dplyr)
# Criar regioes com os estados por prova
glimpse(notateste$SG_UF_RESIDENCIA)
table(notateste$SG_UF_RESIDENCIA)
x <- c(notateste$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
notateste$regioes = regioes
table(notateste$regioes)
names(table(notateste$regioes))
# Criar vetor com nomes
nomes = names(notateste)
testando = notateste[c(nomes, "NU_INSCRICAO")]
#testando = testando[c(nomes[-40:-47])]
testando = testando[c(-25:-28)]
testando = testando[c(-1)]
testando = testando[c(-44)]
# Abastecer de informações nossa base ----
## LIMPEZA Retirando valores NA da tabela
library(tidyr)
# 13730*26.43/100 -> 3628.839 de dados, Sem valores NA dataset corresponde a 26.43%
testando = testando %>% drop_na()
# Transformar variaveis em numeric
testando$SG_UF_RESIDENCIA = as.numeric(testando$SG_UF_RESIDENCIA)
testando$TP_SEXO = as.numeric(testando$TP_SEXO)
testando$regioes = as.factor(testando$regioes)
testando$regioes = as.numeric(testando$regioes)
testando$Q001 = as.numeric(testando$Q001)
testando$Q002 = as.numeric(testando$Q002)
testando$Q006 = as.numeric(testando$Q006)
testando$Q024 = as.numeric(testando$Q024)
testando$Q025 = as.numeric(testando$Q025)
testando$Q026 = as.numeric(testando$Q026)
testando$Q027 = as.numeric(testando$Q027)
testando$Q047 = as.numeric(testando$Q047)
names(testando[35:42])
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
names(glimpse(testando))
summary(testando)
nomes = names(testando)
#### TREINO #####
# Etapa 1 - Coletando os dados
nota <- read.csv("train.csv")
# Etapa 2: Explorando e Preparando os Dados
# Visualizando as variáveis
str(nota)
# Medias de Tendência Central da variável NOTAS_MT
summary(nota$NU_NOTA_MT)
# Visualizar se possui alguma nota com valor NA
any(is.na(nota$NU_NOTA_MT))
# Construindo um histograma
hist(nota$NU_NOTA_MT, main = 'Histograma', xlab = 'Notas')
# Criar Tabela de contingência das regiões
names(table(nota$SG_UF_RESIDENCIA))
# Criar regioes com os estados por prova
#intalar pacote dplyr
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
# Segmentando apenas os dados que temos no teste
nota = nota[c(nomes, "NU_NOTA_MT")]
treinando =  nota %>% drop_na()
glimpse(treinando)
# Vizualizar se os dados estão em estado numérico para envolver no algoritmo
glimpse(testando)
glimpse(treinando)
treinando$regioes = as.numeric(treinando$regioes)
glimpse(treinando)
nota <- read.csv("train.csv")
#View(nota)
# Etapa 2: Explorando e Preparando os Dados
# Visualizando as variáveis
str(nota)
# Medias de Tendência Central da variável NOTAS_MT
summary(nota$NU_NOTA_MT)
# Visualizar se possui alguma nota com valor NA
any(is.na(nota$NU_NOTA_MT))
# Construindo um histograma
hist(nota$NU_NOTA_MT, main = 'Histograma', xlab = 'Notas')
# Criar Tabela de contingência das regiões
names(table(nota$SG_UF_RESIDENCIA))
# Criar regioes com os estados por prova
#intalar pacote dplyr
glimpse(nota$SG_UF_RESIDENCIA)
table(nota$SG_UF_RESIDENCIA)
x <- c(nota$SG_UF_RESIDENCIA)
lookup <- c( AC = "NORTE",  AL = "NORDESTE",  AM = "NORTE",  AP = "NORTE",  BA = "NORDESTE", CE = "NORDESTE", DF = "CENTRO-OESTE", ES = "SUDESTE", GO = "CENTRO-OESTE", MA = "NORDESTE", MG = "SUDESTE", MS = "CENTRO-OESTE", MT = "CENTRO-OESTE", PA = "NORTE", PB = "NORDESTE", PE = "NORDESTE", PI = "NORDESTE", PR = "SUL", RJ = "SUDESTE", RN = "NORDESTE", RO = "NORTE", RR = "NORTE", RS = "SUL", SC = "SUL", SE = "NORDESTE", SP = "SUDESTE", TO = "NORTE")
uniao = lookup[x]
regioes = unname(uniao)
table(regioes)
nota$regioes = regioes
table(nota$regioes)
names(table(nota$regioes))
# Segmentando apenas os dados que temos no teste
nota = nota[c(nomes, "NU_NOTA_MT")]
treinando =  nota %>% drop_na()
#treinando = treinando[c(-37)]
treinando$SG_UF_RESIDENCIA = as.numeric(treinando$SG_UF_RESIDENCIA)
treinando$TP_SEXO = as.numeric(treinando$TP_SEXO)
treinando$regioes = as.factor(treinando$regioes)
treinando$regioes = as.numeric(treinando$regioes)
treinando$Q001 = as.numeric(treinando$Q001)
treinando$Q002 = as.numeric(treinando$Q002)
treinando$Q006 = as.numeric(treinando$Q006)
treinando$Q024 = as.numeric(treinando$Q024)
treinando$Q025 = as.numeric(treinando$Q025)
treinando$Q026 = as.numeric(treinando$Q026)
treinando$Q027 = as.numeric(treinando$Q027)
treinando$Q047 = as.numeric(treinando$Q047)
nota = treinando
treinando = treinando[c(-1)]
glimpse(treinando)
# Scatterplot Matrix
#install.packages("psych")
library(psych)
# Etapa 3: Treinando o Modelo (usando os dados de treino)
modelo <- lm(NU_NOTA_MT ~ ., data = treinando)
# Visualizando os coeficientes
modelo
# Aqui verificamos as notas previstas pelo modelo que devem ser iguais aos dados de treino
previsao1 <- predict(modelo)
View(previsao1)
# Etapa 4: Avaliando a Performance do Modelo
# Mais detalhes sobre o modelo
summary(modelo)
# Adicionando uma variável com o dobro do valor das idades
treinando$idade2 <- treinando$NU_IDADE ^ 2
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA * TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA * TP_SEXO + IN_SABATISTA + NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA * TP_SEXO + IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA * TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA * TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA * TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA * TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN + NU_NOTA_CH + NU_NOTA_LC + TP_STATUS_REDACAO + NU_NOTA_COMP2 + regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes + TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC +
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA + TP_SEXO + IN_SABATISTA + NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA * TP_SEXO + IN_SABATISTA + NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 + TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA * TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . + idade2 * TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA + TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
# Criando o modelo final
modelo_v2 <- lm(NU_NOTA_MT ~ . * idade2 * TP_SEXO * regioes * TP_DEPENDENCIA_ADM_ESC *
TP_ESCOLA + TP_SEXO * IN_SABATISTA * NU_NOTA_CN * NU_NOTA_CH * NU_NOTA_LC * TP_STATUS_REDACAO * NU_NOTA_COMP2 * regioes, data = treinando)
summary(modelo_v2)
